package ece596.ucsb.localizedwifi;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.Button;

public class MainActivity extends FragmentActivity implements OnClickListener, SensorEventListener {

	private SensorManager mSensorManager;
	
	private Sensor mMagnetic;

	
	private MapUI MyMap;
	
	//consts
	public final static int X_AXIS = 0;
	
	private float[] mGrav;
	
	private Button reset_map_btn, calibrate_btn, scan_btn, location_btn, reset_wifi_btn;
	
	//Hard coded Room Number
	private int ROOM_NUMBER = 1;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		getSupportFragmentManager().beginTransaction().add(R.id.map, R.id.map, "tag").commit();
		
		mSensorManager = (SensorManager)getSystemService(Context.SENSOR_SERVICE);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		
		//sensor definitions
		mMagnetic = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);

		
		calibrate_btn = (Button) findViewById(R.id.calibrate_btn);
		calibrate_btn.setOnClickListener(this);
		reset_map_btn = (Button) findViewById(R.id.reset_map_btn);
		reset_map_btn.setOnClickListener(this);
		scan_btn = (Button) findViewById(R.id.scan_btn);
		scan_btn.setOnClickListener(this);
		location_btn = (Button) findViewById(R.id.location_btn);
		location_btn.setOnClickListener(this);
		reset_wifi_btn = (Button) findViewById(R.id.reset_wifi_btn);
		reset_wifi_btn.setOnClickListener(this);
		
		MyMap = new MapUI();
		
		//MyMap.setUpMapIfNeeded();		
		//MyMap.setMap();
		//MyMap.resetArrow();
		//MyMap.updateDisplay();
		
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	
    @Override
    protected void onResume() {
        super.onResume();
        //mSensorManager.registerListener(this, mSensor,SensorManager.SENSOR_DELAY_GAME);
        //mSensorManager.registerListener(this, mAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);
        mSensorManager.registerListener(this, mMagnetic, SensorManager.SENSOR_DELAY_NORMAL);
        //mSensorManager.registerListener(this, mGravity, SensorManager.SENSOR_DELAY_NORMAL);
    }

    @Override
    protected void onStop() {
        super.onStop();
    }
    
	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onSensorChanged(SensorEvent event) {
		Sensor sensor = event.sensor;
		int type = sensor.getType();
		switch(type){
		
		case Sensor.TYPE_MAGNETIC_FIELD:
			// TODO can be used to help step detection?
			if (mGrav != null)
				MyMap.rotateArrow(CompassHelper.getThetaMatrix(mGrav, event.values));
			break;
			
		case Sensor.TYPE_GRAVITY:
			// TODO can be used to help step detection?
			System.arraycopy(event.values, 0, mGrav, 0, 3);
			break;
		
		default:
			break;
		}
		
	}

	@Override
	public void onClick(View arg0) {
		int switchValue = arg0.getId();
		switch (switchValue) {
	
		case R.id.reset_map_btn:

			break;
		
		case R.id.calibrate_btn:

			break;
		
		case R.id.location_btn:

			break;
			
		case R.id.scan_btn:

			break;
			
		case R.id.reset_wifi_btn:

			break;
			
		default:
			break;
		
		}
		
	}

}
